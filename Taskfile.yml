version: "3"

# Variables - equivalent to variables in Makefile
vars:
  IMG: '{{.IMG | default "controller:latest"}}'
  GOBIN:
    sh: if [ -z "$(go env GOBIN)" ]; then echo "$(go env GOPATH)/bin"; else echo "$(go env GOBIN)"; fi
  CONTAINER_TOOL: '{{.CONTAINER_TOOL | default "docker"}}'
  LOCALBIN: '{{.LOCALBIN | default "$(pwd)/bin"}}'
  KUBECTL: kubectl
  KIND: kind
  KUSTOMIZE: "{{.LOCALBIN}}/kustomize"
  CONTROLLER_GEN: "{{.LOCALBIN}}/controller-gen"
  ENVTEST: "{{.LOCALBIN}}/setup-envtest"
  GOLANGCI_LINT: "{{.LOCALBIN}}/golangci-lint"
  KUSTOMIZE_VERSION: v5.6.0
  CONTROLLER_TOOLS_VERSION: v0.18
  ENVTEST_VERSION:
    sh: go list -m -f "{{ .Version }}" sigs.k8s.io/controller-runtime | awk -F'[v.]' '{printf "release-%d.%d", $2, $3}'
  ENVTEST_K8S_VERSION:
    sh: go list -m -f "{{ .Version }}" k8s.io/api | awk -F'[v.]' '{printf "1.%d", $3}'
  GOLANGCI_LINT_VERSION: v1.63.4
  PLATFORMS: linux/arm64,linux/amd64,linux/s390x,linux/ppc64le
  KUBEVIRTNAMESPACE: kubevirt

# Task definitions
tasks:
  default:
    desc: Default task - builds the manager binary
    deps: [build]

  # General tasks
  help:
    desc: Display help information about available tasks
    cmds:
      - task --list

  # Development tasks
  manifests:
    desc: Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects
    deps: [controller-gen]
    cmds:
      - '{{.CONTROLLER_GEN}} rbac:roleName=manager-role crd webhook paths="./..." output:crd:artifacts:config=config/crd/bases'

  generate:
    desc: Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations
    deps: [controller-gen]
    cmds:
      - '{{.CONTROLLER_GEN}} object:headerFile="hack/boilerplate.go.txt" paths="./..."'

  fmt:
    desc: Run go fmt against code
    cmds:
      - go fmt ./...

  vet:
    desc: Run go vet against code
    cmds:
      - go vet ./...

  test-setup:
    desc: Set up the environment for testing
    deps: [manifests, generate, fmt, vet, setup-envtest]

  test:
    desc: Run tests
    deps: [test-setup]
    cmds:
      - KUBEBUILDER_ASSETS="$({{.ENVTEST}} use {{.ENVTEST_K8S_VERSION}} --bin-dir {{.LOCALBIN}} -p path)" go test $$(go list ./... | grep -v /e2e) -coverprofile coverage.out

  test-e2e:
    desc: Run the e2e tests (requires Kind to be pre-installed and running)
    deps: [manifests, generate, fmt, vet]
    cmds:
      - |
        if ! command -v {{.KIND}} >/dev/null 2>&1; then
          echo "Kind is not installed. Please install Kind manually."
          exit 1
        fi
      - |
        if ! {{.KIND}} get clusters | grep -q 'kind'; then
          echo "No Kind cluster is running. Please start a Kind cluster before running the e2e tests."
          exit 1
        fi
      - go test ./test/e2e/ -v -ginkgo.v

  lint:
    desc: Run golangci-lint linter
    deps: [golangci-lint]
    cmds:
      - "{{.GOLANGCI_LINT}} run"

  lint-fix:
    desc: Run golangci-lint linter and perform fixes
    deps: [golangci-lint]
    cmds:
      - "{{.GOLANGCI_LINT}} run --fix"

  lint-config:
    desc: Verify golangci-lint linter configuration
    deps: [golangci-lint]
    cmds:
      - "{{.GOLANGCI_LINT}} config verify"

  # Build tasks
  build-setup:
    desc: Set up environment for building
    deps: [manifests, generate, fmt, vet]

  build:
    desc: Build manager binary
    deps: [build-setup]
    cmds:
      - go build -o bin/kv-operator cmd/main.go

  run:
    desc: Run a controller from your host
    deps: [manifests, generate, fmt, vet]
    cmds:
      - go run ./cmd/main.go

  docker-build:
    desc: Build docker image with the manager
    cmds:
      - "{{.CONTAINER_TOOL}} build -t {{.IMG}} ."

  docker-push:
    desc: Push docker image with the manager
    cmds:
      - "{{.CONTAINER_TOOL}} push {{.IMG}}"

  docker-buildx:
    desc: Build and push docker image for the manager for cross-platform support
    cmds:
      - sed -e '1 s/\(^FROM\)/FROM --platform=\$$\{BUILDPLATFORM\}/; t' -e ' 1,// s//FROM --platform=\$$\{BUILDPLATFORM\}/' Dockerfile > Dockerfile.cross
      - "{{.CONTAINER_TOOL}} buildx create --name kubevirt-operator-builder || true"
      - "{{.CONTAINER_TOOL}} buildx use kubevirt-operator-builder"
      - "{{.CONTAINER_TOOL}} buildx build --push --platform={{.PLATFORMS}} --tag {{.IMG}} -f Dockerfile.cross ."
      - "{{.CONTAINER_TOOL}} buildx rm kubevirt-operator-builder || true"
      - rm Dockerfile.cross

  build-installer:
    desc: Generate a consolidated YAML with CRDs and deployment
    deps: [manifests, generate, kustomize]
    cmds:
      - mkdir -p dist
      - cd config/kv-operator && {{.KUSTOMIZE}} edit set image controller={{.IMG}}
      - "{{.KUSTOMIZE}} build config/default > dist/install.yaml"

  # Deployment tasks
  install:
    desc: Install CRDs into the K8s cluster specified in ~/.kube/config
    deps: [manifests, kustomize]
    cmds:
      - "{{.KUSTOMIZE}} build config/crd | {{.KUBECTL}} apply -f -"

  uninstall:
    desc: Uninstall CRDs from the K8s cluster specified in ~/.kube/config
    deps: [manifests, kustomize]
    cmds:
      - '{{.KUSTOMIZE}} build config/crd | {{.KUBECTL}} delete --ignore-not-found={{.IGNORE_NOT_FOUND | default "false"}} -f -'
    vars:
      IGNORE_NOT_FOUND: '{{.IGNORE_NOT_FOUND | default "false"}}'

  deploy:
    desc: Deploy controller to the K8s cluster specified in ~/.kube/config
    deps: [manifests, kustomize]
    cmds:
      - cd config/kv-operator && {{.KUSTOMIZE}} edit set image controller={{.IMG}}
      - "{{.KUSTOMIZE}} build config/default | {{.KUBECTL}} apply -f -"

  undeploy:
    desc: Undeploy controller from the K8s cluster specified in ~/.kube/config
    deps: [kustomize]
    cmds:
      - '{{.KUSTOMIZE}} build config/default | {{.KUBECTL}} delete --ignore-not-found={{.IGNORE_NOT_FOUND | default "false"}} -f -'
    vars:
      IGNORE_NOT_FOUND: '{{.IGNORE_NOT_FOUND | default "false"}}'

  # KubeVirt specific tasks
  install-kubevirt:
    desc: Install KubeVirt operator and CRDs into the K8s cluster specified in ~/.kube/config
    cmds:
      - echo "Installing KubeVirt operator and CRDs..."
      - |
        VERSION=$(curl -s https://storage.googleapis.com/kubevirt-prow/release/kubevirt/kubevirt/stable.txt)
        echo "Using KubeVirt version: $VERSION"
        {{.KUBECTL}} apply -f https://github.com/kubevirt/kubevirt/releases/download/$VERSION/kubevirt-operator.yaml
        {{.KUBECTL}} apply -f https://github.com/kubevirt/kubevirt/releases/download/$VERSION/kubevirt-cr.yaml

        echo "üîÑ Waiting for KubeVirt CR to become available..."
        RESOURCE_NAME=$(kubectl get kubevirt -n {{.KUBEVIRTNAMESPACE}} -o jsonpath="{.items[0].metadata.name}")
        kubectl wait kubevirt $RESOURCE_NAME --for=condition=Available --timeout=5m -n {{.KUBEVIRTNAMESPACE}}

        echo "üîÑ Waiting for KubeVirt core components to be ready..."
        for component in virt-operator virt-api virt-controller; do
          echo "‚è≥ Waiting for deployment $component..."
          kubectl rollout status deployment $component -n {{.KUBEVIRTNAMESPACE}} || exit 1
        done

        echo "üîÑ Waiting for virt-handler pods to be ready..."
        kubectl wait --for=condition=Ready pod -l kubevirt.io=virt-handler -n {{.KUBEVIRTNAMESPACE}} --timeout=300s

        echo "‚úÖ KubeVirt is fully deployed and ready."

  uninstall-kubevirt:
    desc: Uninstall KubeVirt operator and CRDs from the K8s cluster specified in ~/.kube/config
    cmds:
      - echo "Uninstalling KubeVirt operator and CRDs..."
      - |
        VERSION=$(curl -s https://storage.googleapis.com/kubevirt-prow/release/kubevirt/kubevirt/stable.txt)
        echo "Using KubeVirt version: $VERSION"
        echo "Deleting KubeVirt CRDs..."
        {{.KUBECTL}} delete -f https://github.com/kubevirt/kubevirt/releases/download/$VERSION/kubevirt-operator.yaml
        echo "Deleting KubeVirt operator..."
        {{.KUBECTL}} delete -f https://github.com/kubevirt/kubevirt/releases/download/$VERSION/kubevirt-cr.yaml
        echo "Deleting KubeVirt namespace..."
        {{.KUBECTL}} delete namespace {{.KUBEVIRTNAMESPACE}}
        echo "‚úÖ KubeVirt operator and CRDs uninstalled."

  # Shared templates/functions
  go-install-template:
    internal: true
    desc: Template task that serves as a template for go tool installation

  go-install-tool:
    internal: true
    desc: Go install a tool with a specific version
    cmds:
      - |
        if [ ! -f {{.TOOL_PATH}}-{{.VERSION}} ]; then
          echo "Downloading {{.PACKAGE}}@{{.VERSION}}"
          rm -f {{.TOOL_PATH}} || true
          GOBIN={{.LOCALBIN}} go install {{.PACKAGE}}@{{.VERSION}}
          mv {{.TOOL_PATH}} {{.TOOL_PATH}}-{{.VERSION}}
        fi
      - ln -sf {{.TOOL_PATH}}-{{.VERSION}} {{.TOOL_PATH}}

  # Dependencies/tools tasks
  ensure-bin-dir:
    internal: true
    cmds:
      - mkdir -p {{.LOCALBIN}}
    status:
      - test -d {{.LOCALBIN}}

  kustomize:
    desc: Download kustomize locally if necessary
    deps: [ensure-bin-dir, go-install-template]
    vars:
      TOOL_PATH: "{{.KUSTOMIZE}}"
      PACKAGE: "sigs.k8s.io/kustomize/kustomize/v5"
      VERSION: "{{.KUSTOMIZE_VERSION}}"
    cmds:
      - task: go-install-tool
        vars:
          {
            TOOL_PATH: "{{.TOOL_PATH}}",
            PACKAGE: "{{.PACKAGE}}",
            VERSION: "{{.VERSION}}",
          }
    status:
      - test -f {{.KUSTOMIZE}}-{{.KUSTOMIZE_VERSION}}

  controller-gen:
    desc: Download controller-gen locally if necessary
    deps: [ensure-bin-dir, go-install-template]
    vars:
      TOOL_PATH: "{{.CONTROLLER_GEN}}"
      PACKAGE: "sigs.k8s.io/controller-tools/cmd/controller-gen"
      VERSION: "{{.CONTROLLER_TOOLS_VERSION}}"
    cmds:
      - task: go-install-tool
        vars:
          {
            TOOL_PATH: "{{.TOOL_PATH}}",
            PACKAGE: "{{.PACKAGE}}",
            VERSION: "{{.VERSION}}",
          }
    status:
      - test -f {{.CONTROLLER_GEN}}-{{.CONTROLLER_TOOLS_VERSION}}

  setup-envtest:
    desc: Download the binaries required for ENVTEST in the local bin directory
    deps: [envtest]
    cmds:
      - echo "Setting up envtest binaries for Kubernetes version {{.ENVTEST_K8S_VERSION}}..."
      - |
        {{.ENVTEST}} use {{.ENVTEST_K8S_VERSION}} --bin-dir {{.LOCALBIN}} -p path || {
          echo "Error: Failed to set up envtest binaries for version {{.ENVTEST_K8S_VERSION}}."
          exit 1
        }

  envtest:
    desc: Download setup-envtest locally if necessary
    deps: [ensure-bin-dir, go-install-template]
    vars:
      TOOL_PATH: "{{.ENVTEST}}"
      PACKAGE: "sigs.k8s.io/controller-runtime/tools/setup-envtest"
      VERSION: "{{.ENVTEST_VERSION}}"
    cmds:
      - task: go-install-tool
        vars:
          {
            TOOL_PATH: "{{.TOOL_PATH}}",
            PACKAGE: "{{.PACKAGE}}",
            VERSION: "{{.VERSION}}",
          }
    status:
      - test -f {{.ENVTEST}}-{{.ENVTEST_VERSION}}

  golangci-lint:
    desc: Download golangci-lint locally if necessary
    deps: [ensure-bin-dir, go-install-template]
    vars:
      TOOL_PATH: "{{.GOLANGCI_LINT}}"
      PACKAGE: "github.com/golangci/golangci-lint/cmd/golangci-lint"
      VERSION: "{{.GOLANGCI_LINT_VERSION}}"
    cmds:
      - task: go-install-tool
        vars:
          {
            TOOL_PATH: "{{.TOOL_PATH}}",
            PACKAGE: "{{.PACKAGE}}",
            VERSION: "{{.VERSION}}",
          }
    status:
      - test -f {{.GOLANGCI_LINT}}-{{.GOLANGCI_LINT_VERSION}}
